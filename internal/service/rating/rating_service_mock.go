// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/service/rating/rating_service.go

// Package rating is a generated GoMock package.
package rating

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRatingService is a mock of IRatingService interface.
type MockIRatingService struct {
	ctrl     *gomock.Controller
	recorder *MockIRatingServiceMockRecorder
}

// MockIRatingServiceMockRecorder is the mock recorder for MockIRatingService.
type MockIRatingServiceMockRecorder struct {
	mock *MockIRatingService
}

// NewMockIRatingService creates a new mock instance.
func NewMockIRatingService(ctrl *gomock.Controller) *MockIRatingService {
	mock := &MockIRatingService{ctrl: ctrl}
	mock.recorder = &MockIRatingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRatingService) EXPECT() *MockIRatingServiceMockRecorder {
	return m.recorder
}

// GetAverageRating mocks base method.
func (m *MockIRatingService) GetAverageRating(ch chan *GetAverageRatingServiceResponse, model *GetAverageRatingServiceModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAverageRating", ch, model)
}

// GetAverageRating indicates an expected call of GetAverageRating.
func (mr *MockIRatingServiceMockRecorder) GetAverageRating(ch, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageRating", reflect.TypeOf((*MockIRatingService)(nil).GetAverageRating), ch, model)
}

// SendRating mocks base method.
func (m *MockIRatingService) SendRating(ch chan *SendRatingServiceResponse, model *SendRatingServiceModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendRating", ch, model)
}

// SendRating indicates an expected call of SendRating.
func (mr *MockIRatingServiceMockRecorder) SendRating(ch, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRating", reflect.TypeOf((*MockIRatingService)(nil).SendRating), ch, model)
}
